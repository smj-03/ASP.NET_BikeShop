@model BikeShop.Models.CreateOrderDto

@{
    ViewData["Title"] = "Utwórz zamówienie";
    var productsList = ViewBag.Products as List<SelectListItem> ?? new List<SelectListItem>();
}
@{
    var productOptions = new System.Text.StringBuilder();
    if (ViewBag.Products is List<SelectListItem> products)
    {
        foreach (var product in products)
        {
            productOptions.AppendLine($"<option value=\"{product.Value}\">{product.Text}</option>");
        }
    }
}
<h2>@ViewData["Title"]</h2>

<form asp-action="Create" method="post" id="order-form">
    @Html.AntiForgeryToken()


    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div id="products-list">
        @for (int i = 0; i < Model.Products.Count; i++)
        {
            <div class="product-item mb-3 border p-3 rounded shadow-sm">
                <div class="form-group">
                    <label asp-for="@Model.Products[i].ProductId">Produkt</label>
                    <select asp-for="@Model.Products[i].ProductId" 
                            class="form-control" 
                            asp-items="productsList">
                        <option value="">-- wybierz produkt --</option>
                    </select>
                    <span asp-validation-for="@Model.Products[i].ProductId" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="@Model.Products[i].Quantity">Ilość</label>
                    <input asp-for="@Model.Products[i].Quantity" 
                           type="number" min="1" class="form-control" />
                    <span asp-validation-for="@Model.Products[i].Quantity" class="text-danger"></span>
                </div>

            </div>
        }
    </div>

    <button type="button" id="add-product-btn" class="btn btn-secondary mb-3">Dodaj produkt</button>
    <button type="submit" class="btn btn-primary">Złóż zamówienie</button>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        let productIndex = @Model.Products.Count;
        const productOptions = `@Html.Raw(productOptions.ToString())`;

        document.getElementById('add-product-btn').addEventListener('click', function () {
            const container = document.getElementById('products-list');
            const div = document.createElement('div');
            div.classList.add('product-item', 'mb-3', 'border', 'p-3');

            div.innerHTML = `
            <div class="form-group">
                <label>Produkt</label>
                <select name="Products[${productIndex}].ProductId" class="form-control" required>
                    <option value="">-- wybierz produkt --</option>
                    ${productOptions}
                </select>
                <span class="text-danger field-validation-valid"
                      data-valmsg-for="Products[${productIndex}].ProductId"
                      data-valmsg-replace="true"></span>
            </div>

            <div class="form-group">
                <label>Ilość</label>
                <input name="Products[${productIndex}].Quantity"
                       type="number"
                       min="1"
                       class="form-control"
                       required
                       data-val="true"
                       data-val-required="Pole Ilość jest wymagane."
                       data-val-range="Wartość musi być liczbą dodatnią."
                       data-val-range-min="1" />
                <span class="text-danger field-validation-valid"
                      data-valmsg-for="Products[${productIndex}].Quantity"
                      data-valmsg-replace="true"></span>
            </div>
        `;

            container.appendChild(div);
            $.validator.unobtrusive.parse(div);
            productIndex++;
        });
    </script>

}
